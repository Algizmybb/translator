= Translator - i18n tooling for Rails

Translator make using the internationalization (i18n) facility introduced in Rails 2.2 simpler by keeping your code DRY through simple conventions, 
and makes testing easier.

== The Problem

The (very!) helpful I18n[http://api.rubyonrails.org/classes/I18n.html] library finds keys in locale bundles, but doesn't know anything about Rails applications. Applications that have a lot of strings need a system of keeping them organized. This can lead to write code that makes you repeat yourself again and again about which key to find.

Translator adds smarts to controllers, views, models & mailers to know the context of the request to find a key. Translator defines a convention for the hierarchy of keys within locale bundles that makes it simpler to code and maintain, while still getting all the benefits of the underlying I18n library. (Note: Translator does not care how the actual yml files are stored in the filesystem.)

Quick example - if you follow the key convention of structuring your locale bundle like:
  blog_posts: # controller
    show: # action
      title: "My Awesome Blog Post"
      byline: "Written by {{author}}"

Then when writing the <tt>BlogPostsController.show</tt> action you can just use <tt>t('title')</tt> to fetch the string (equivalent to <tt>I18n.translate('blog_posts.show.title')</tt>). Similarly, in the <tt>show.erb</tt> template you can get use <tt>t('byline', :author => "Mike")</tt>. This extends to Models and Mailers as well. As they say, "Look at all the things I'm not doing!"

== Plugin Installation

To install this plugin into your Rails app (2.2 or later):

  ./script/plugin install git://github.com/graysky/translator.git

== RDocs

{The RDocs are online}[http://graysky.github.com/translator/rdoc/index.html] or can be generated via <tt>rake rdoc</tt> in the translator plugin directory.

== Simple +translate+ Everywhere

The +translate+ (or shorter +t+) method is added to:
* ActionController
* ActionView
* ActiveRecord
* ActionMailer

In the spirit of Rails, there is a hierarchy of keys that borrows the same layout as the typical "views" directory. A sample Blog application 
is used as an example.

For controllers/views/mailers it is:
  en: # locale
    # the controller name
    blog_posts:
      # the action name
      index:
        key: "Hello World"
      
      # partials w/o underscore (template "_footer.erb")      
      footer: 
        key: "My Copyright"
    
    # "layouts" is fixed
    layouts:
      # the layout name (template "main.erb")
      main:
        key: "My App Name"
    
    # for shared partials called like: render :template => "shared/user"
    # where "shared" is the directory name
    shared:
      # partial name w/o underscore (template "_user.erb")
      user:
        key: "Foo"

    # the full mailer name
    blog_comment_mailer:
      # the method name (does not include "delever")
      comment_notification:
        subject: "New Comment"
        
For models it is:
  en:
    # The model name
    blog_post:
      key: "Custom validation error" 


=== Key Lookup

When a key is looked up, Translator adds extra scoping to the lookup based on where it is called from. For:
* Controllers & Views the scope includes <tt>[:controller_name, :action_name]</tt>. (For shared partials it is <tt>[:template_path, :partial_name]</tt>)
* Mailers the scope includes <tt>[:mailer_name, :method_name]</tt>
* Models the scope includes <tt>[:model_name]</tt>

But what happens when if you want to share strings across a controller? Let's say you have error messages that are set in flash notices
and then are shared between actions in a controller defined in the locale bundle like:
  blog_posts:
    errors:
      permission_denied: "Permission denied to read this blog post"

If Translator doesn't find the original key, it will remove a layer of scoping and try again.
So if in our Blogs controller +show+ action we want to set a <tt>flash[:error]</tt> to a permission denied message it can find the string by calling <tt>t('error.permission_denied')</tt>.
Translator will first look for "blog_posts.show.error.permission_denied", which doesn't exist. So it will then try to find 
"blog_posts.errors.permission_denied" and return the correct string. This can be used to create greater levels of scoping, or to force finding 
global strings (ex. <tt>t("global.app_name")</tt>).

== Testing Help

* <tt>Translator.strict_mode</tt> will cause an exception to be raised for any missing translations. Enabled by default during testing to help find mistyped or accidently forgotten keys. It can be disabled by calling <tt>Translator.strict_mode(false)</tt> (in test_helper for example).
* <tt>assert_translated</tt> takes a block and asserts that all lookups within that block have real translations. It is a more targeted version of <tt>strict_mode</tt>. Example:

    assert_translated do
      # Will assert that all keys find valid translations inside the block
      get :show
    end

* If you're trying to avoid hard-coding strings in tests, you can still use the lookup that is added to models and controllers:
  
    # Inside a test exercising a BlogPostController (@controller created in setup method) 
    get :show, :id => 123
    # the byline should be in the body - uses @controller to make lookup easy (automatically knows controller name and action)
    assert_match @controller.t('byline', :name => "Mike"), @response.body

* Pseudo-translation mode. Pseudo-translation wraps all strings with leading and trailing text so that you can spot if you forgot to extract strings. It can be enabled by <tt>Translator.pseudo_translate</tt> (in an environment file or locale.rb for example). It does not change the lookup process but will change a string like "My Blog" to "[[ My Blog ]]". The text that is prepended / appended can be set by calling <tt>Translator.pseudo_prepend = "@@"</tt> (or +append+). <b>Pro Tip:</b> This can also be used to see how a layout will display in a localized language that is longer than the default. For example, German is often significantly more verbose than English. By padding all strings you can test how a layout will adapt and make changes.


Bug reports welcome. {Patches very welcome}[http://github.com/graysky/translator].

Copyright (c) 2009 {Mike Champion}[http://graysky.org], released under the MIT license